name: Infrastructure as Code

on:
  push:
    branches: [main]
    paths: ['terraform/**']
  pull_request:
    branches: [main]
    paths: ['terraform/**']
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: 1.5.0
  AWS_REGION: us-west-2

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      run: |
        cd terraform/aws
        terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        cd terraform/aws
        terraform init -backend=false
    
    - name: Terraform Validate
      run: |
        cd terraform/aws
        terraform validate

  terraform-security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        download_external_modules: true
    
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    if: github.event_name == 'pull_request'
    
    env:
      TF_VAR_environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: |
        cd terraform/aws
        terraform init
    
    - name: Terraform Plan
      id: plan
      run: |
        cd terraform/aws
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > plan.txt
    
    - name: Comment PR with Plan
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/aws/plan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          const body = plan.length > maxGitHubBodyCharacters ? 
            `#### Terraform Plan (truncated)\n\`\`\`\n${plan.substring(0, maxGitHubBodyCharacters)}\n\`\`\`\n\n*Output truncated due to GitHub character limits*` :
            `#### Terraform Plan\n\`\`\`\n${plan}\n\`\`\``;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    env:
      TF_VAR_environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Terraform Init
      run: |
        cd terraform/aws
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform/aws
        terraform plan -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd terraform/aws
        terraform apply tfplan
    
    - name: Output important values
      run: |
        cd terraform/aws
        echo "EKS Cluster Endpoint: $(terraform output -raw eks_cluster_endpoint)"
        echo "Application URL: $(terraform output -raw application_url)"
        echo "Kubeconfig Command: $(terraform output -raw kubeconfig_command)"

  terraform-manual:
    name: Manual Terraform Action
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    env:
      TF_VAR_environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: |
        cd terraform/aws
        terraform init
    
    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: |
        cd terraform/aws
        terraform plan
    
    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        cd terraform/aws
        terraform apply -auto-approve
    
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd terraform/aws
        terraform destroy -auto-approve
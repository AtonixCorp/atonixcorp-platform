#!/usr/bin/env python3
"""
Puppet-Gerrit Integration Hook
Automatically triggers Puppet runs when infrastructure changes are merged
"""

import os
import sys
import json
import subprocess
import logging
import requests
from datetime import datetime

# Configuration
PUPPET_MASTER = os.environ.get('PUPPET_MASTER', 'localhost')
PUPPET_ENVIRONMENT = os.environ.get('PUPPET_ENVIRONMENT', 'production')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'http://localhost:8080/puppet-webhook')
LOG_FILE = '/var/log/gerrit/puppet-integration.log'

# Setup logging
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class PuppetGerritIntegration:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def trigger_puppet_run(self, change_info):
        """Trigger Puppet run based on change information"""
        try:
            # Determine affected nodes based on changed files
            affected_nodes = self.get_affected_nodes(change_info)
            
            for node in affected_nodes:
                self.run_puppet_on_node(node, change_info)
            
            # Send webhook notification
            self.send_webhook_notification(change_info, affected_nodes)
            
        except Exception as e:
            self.logger.error(f"Error triggering Puppet run: {e}")
            return False
        
        return True
    
    def get_affected_nodes(self, change_info):
        """Determine which nodes are affected by the change"""
        affected_nodes = []
        changed_files = change_info.get('files', [])
        
        # Map file patterns to node groups
        node_mappings = {
            'manifests/site.pp': ['all'],
            'modules/atonixcorp/manifests/platform.pp': ['platform-nodes'],
            'modules/atonixcorp/manifests/security.pp': ['all'],
            'modules/atonixcorp/manifests/monitoring.pp': ['monitoring-nodes'],
            'hieradata/production/': ['production-nodes'],
            'hieradata/staging/': ['staging-nodes'],
        }
        
        for file_path in changed_files:
            for pattern, nodes in node_mappings.items():
                if pattern in file_path:
                    affected_nodes.extend(nodes)
        
        # Remove duplicates and return
        return list(set(affected_nodes))
    
    def run_puppet_on_node(self, node_group, change_info):
        """Execute Puppet run on specified node group"""
        try:
            if node_group == 'all':
                # Run on all nodes
                cmd = [
                    'puppet', 'job', 'run',
                    '--environment', PUPPET_ENVIRONMENT,
                    '--query', 'nodes[certname] { }',
                    '--description', f"Gerrit change {change_info.get('number', 'unknown')}"
                ]
            else:
                # Run on specific node group
                cmd = [
                    'puppet', 'job', 'run',
                    '--environment', PUPPET_ENVIRONMENT,
                    '--query', f'inventory[certname] {{ facts.node_group = "{node_group}" }}',
                    '--description', f"Gerrit change {change_info.get('number', 'unknown')}"
                ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.logger.info(f"Puppet run triggered successfully for {node_group}")
                self.logger.info(f"Output: {result.stdout}")
            else:
                self.logger.error(f"Puppet run failed for {node_group}: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            self.logger.error(f"Puppet run timed out for {node_group}")
        except Exception as e:
            self.logger.error(f"Error running Puppet on {node_group}: {e}")
    
    def send_webhook_notification(self, change_info, affected_nodes):
        """Send webhook notification about Puppet run"""
        try:
            payload = {
                'event': 'puppet_run_triggered',
                'timestamp': datetime.utcnow().isoformat(),
                'change': {
                    'number': change_info.get('number'),
                    'subject': change_info.get('subject'),
                    'owner': change_info.get('owner', {}).get('name'),
                    'project': change_info.get('project'),
                    'branch': change_info.get('branch')
                },
                'puppet': {
                    'environment': PUPPET_ENVIRONMENT,
                    'affected_nodes': affected_nodes,
                    'master': PUPPET_MASTER
                }
            }
            
            response = requests.post(
                WEBHOOK_URL,
                json=payload,
                timeout=30,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                self.logger.info("Webhook notification sent successfully")
            else:
                self.logger.warning(f"Webhook returned status {response.status_code}")
                
        except requests.RequestException as e:
            self.logger.error(f"Failed to send webhook notification: {e}")
    
    def validate_change(self, change_info):
        """Validate that the change should trigger Puppet runs"""
        # Only trigger for infrastructure-related projects
        infrastructure_projects = [
            'atonixcorp-infrastructure',
            'atonixcorp-puppet',
            'atonixcorp-config'
        ]
        
        project = change_info.get('project', '')
        if project not in infrastructure_projects:
            self.logger.info(f"Skipping Puppet run for non-infrastructure project: {project}")
            return False
        
        # Only trigger for master/main branch merges
        branch = change_info.get('branch', '')
        if branch not in ['master', 'main', 'production']:
            self.logger.info(f"Skipping Puppet run for branch: {branch}")
            return False
        
        return True

def main():
    """Main function called by Gerrit hook"""
    if len(sys.argv) < 2:
        print("Usage: puppet-integration.py <change-info-json>")
        sys.exit(1)
    
    try:
        # Parse change information from Gerrit
        change_info = json.loads(sys.argv[1])
        
        # Initialize integration handler
        integration = PuppetGerritIntegration()
        
        # Validate and process the change
        if integration.validate_change(change_info):
            success = integration.trigger_puppet_run(change_info)
            sys.exit(0 if success else 1)
        else:
            sys.exit(0)  # Not an error, just not applicable
            
    except json.JSONDecodeError as e:
        logging.error(f"Invalid JSON in change info: {e}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
# Docker Compose for AtonixCorp Platform with Unified Frontend+Backend Container
version: '3.8'

services:
  # Database
  db:
    image: postgres:15-alpine
    container_name: atonixcorp_db
    environment:
      POSTGRES_DB: atonixcorp
      POSTGRES_USER: atonixcorp_user
      POSTGRES_PASSWORD: atonixcorp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atonixcorp_user -d atonixcorp"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: atonixcorp_redis
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: atonixcorp_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: atonixcorp_kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: atonixcorp_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: rabbitmq_password
      RABBITMQ_DEFAULT_VHOST: atonixcorp
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MailHog (Email Server for Development)
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: atonixcorp_mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8025 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Unified Backend + Frontend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.fullstack
    container_name: atonixcorp_app
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://atonixcorp_user:atonixcorp_password@db:5432/atonixcorp
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ZOOKEEPER_HOSTS=zookeeper:2181
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - RABBITMQ_URL=amqp://admin:rabbitmq_password@rabbitmq:5672/atonixcorp
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_HOST=mailhog
      - EMAIL_PORT=1025
      - EMAIL_USE_TLS=False
      - DEFAULT_FROM_EMAIL=noreply@atonixcorp.com
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
    ports:
      - "80:80"     # Nginx (serves React + proxies to Django)
      - "8000:8000" # Django API (direct access)
    volumes:
      - app_media:/app/media
      - app_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  atonixcorp_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  rabbitmq_data:
  app_media:
  app_logs:
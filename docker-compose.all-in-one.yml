# AtonixCorp Platform - All-in-One Docker Compose
# This file runs the entire platform with a single command: docker compose -f docker-compose.all-in-one.yml up

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: atonixcorp_db
    environment:
      POSTGRES_DB: atonixcorp
      POSTGRES_USER: atonixcorp_user
      POSTGRES_PASSWORD: atonixcorp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atonixcorp_user -d atonixcorp"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: atonixcorp_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: atonixcorp_backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://atonixcorp_user:atonixcorp_password@db:5432/atonixcorp
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      # Social Authentication (configure as needed)
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GITLAB_CLIENT_ID=${GITLAB_CLIENT_ID:-}
      - GITLAB_CLIENT_SECRET=${GITLAB_CLIENT_SECRET:-}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID:-}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET:-}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - atonixcorp_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: atonixcorp_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_ENVIRONMENT=development
      - CHOKIDAR_USEPOLLING=true
      - GENERATE_SOURCEMAP=true
      # Social Authentication Frontend URLs
      - REACT_APP_GITHUB_AUTH_URL=http://localhost:8000/api/auth/github/
      - REACT_APP_GOOGLE_AUTH_URL=http://localhost:8000/api/auth/google/
      - REACT_APP_GITLAB_AUTH_URL=http://localhost:8000/api/auth/gitlab/
      - REACT_APP_LINKEDIN_AUTH_URL=http://localhost:8000/api/auth/linkedin/
    depends_on:
      - backend
    networks:
      - atonixcorp_network
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: atonixcorp_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - backend
      - frontend
    networks:
      - atonixcorp_network
    profiles:
      - production
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MailHog (Development Email Server) - Optional
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: atonixcorp_mailhog
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    networks:
      - atonixcorp_network
    profiles:
      - email
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8025 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Zookeeper - Optional for messaging
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: atonixcorp_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - atonixcorp_network
    profiles:
      - messaging
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Apache Kafka - Optional for messaging
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: atonixcorp_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - atonixcorp_network
    profiles:
      - messaging
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # RabbitMQ Message Broker - Optional
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: atonixcorp_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: rabbitmq_password
      RABBITMQ_DEFAULT_VHOST: atonixcorp
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    networks:
      - atonixcorp_network
    profiles:
      - messaging
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Celery Worker (Background tasks) - Optional
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: atonixcorp_celery
    command: celery -A atonixcorp worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://atonixcorp_user:atonixcorp_password@db:5432/atonixcorp
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - atonixcorp_network
    profiles:
      - celery

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  rabbitmq_data:
  static_volume:
  media_volume:

networks:
  atonixcorp_network:
    driver: bridge